include(UseAsn1c)
set(ASN1C_GEN_DIR "${CMAKE_CURRENT_SOURCE_DIR}/gen")
set(ASN1C_BUNDLED_GEN_DIR "${CMAKE_CURRENT_SOURCE_DIR}/bundled-gen")
file(GLOB ASN1_SOURCES *.asn1)

if(ASN1C_EXECUTABLE)
    set(_with_asn1c ON)
else()
    set(_with_asn1c OFF)
endif()
option(VANETZA_ASN1_WITH_ASN1C "Generate ASN.1 code using asn1c (instead of using bundled code)" ${_with_asn1c})

if(VANETZA_ASN1_WITH_ASN1C)
    if(NOT ASN1C_EXECUTABLE)
        message(SEND_ERROR "asn1c not found, cannot generate ASN.1 code from sources")
    endif()

    set(ASN1C_ARGS -fcompound-names -gen-PER -pdu=auto)
    if("${ASN1C_VERSION}" VERSION_LESS "0.9.26")
        # These options became default with 0.9.26
        list(APPEND ASN1C_ARGS -fnative-types -fskeletons-copy)
    endif()

    add_custom_command(
        OUTPUT
            ${ASN1C_GEN_DIR}/CAM.h
            ${ASN1C_GEN_DIR}/DENM.h
            ${ASN1C_GEN_DIR}/VanetzaTest.h
        COMMAND ${ASN1C_EXECUTABLE} ${ASN1C_ARGS} ${ASN1_SOURCES}
        COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_SOURCE_DIR}/patch_asn1c.cmake
        DEPENDS ${ASN1C_SOURCES}
        WORKING_DIRECTORY ${ASN1C_GEN_DIR}
        VERBATIM)

    add_custom_target(update_asn1c_bundle
        COMMAND ${CMAKE_COMMAND} -E remove_directory ${ASN1C_BUNDLED_GEN_DIR}
        COMMAND ${CMAKE_COMMAND} -E copy_directory ${ASN1C_GEN_DIR} ${ASN1C_BUNDLED_GEN_DIR}
        DEPENDS ${ASN1C_GEN_DIR}/CAM.h ${ASN1C_GEN_DIR}/DENM.h
        VERBATIM)
    add_custom_command(TARGET update_asn1c_bundle PRE_BUILD
        COMMAND ${CMAKE_COMMAND} -E remove .gitignore converter-sample.c Makefile.am.sample
        WORKING_DIRECTORY ${ASN1C_BUNDLED_GEN_DIR}
        VERBATIM)

else()
    message(STATUS "Using bundled ASN.1 code instead of asn1c")
    set(_bundle_dir ${ASN1C_BUNDLED_GEN_DIR})
    set(_gen_dir ${ASN1C_GEN_DIR})
    file(GLOB _bundle_files RELATIVE ${_bundle_dir} ${_bundle_dir}/*.c ${_bundle_dir}/*.h)
    file(GLOB _gen_files RELATIVE ${_gen_dir} ${_gen_dir}/*.c ${_gen_dir}/*.h)

    # remove surplus files
    foreach(_gen_file IN LISTS _gen_files)
        list(FIND _bundle_files ${_gen_file} _bundle_index)
        if(_bundle_index LESS 0)
            file(REMOVE ${_gen_dir}/${_gen_file})
        endif()
    endforeach()

    # synchronize bundled files into gen directory
    if(${CMAKE_VERSION} VERSION_LESS 3.5)
        foreach(_bundle_file IN LISTS _bundle_files)
            execute_process(COMMAND ${CMAKE_COMMAND} -E
                copy_if_different ${_bundle_file} ${_gen_dir}
                WORKING_DIRECTORY ${_bundle_dir})
        endforeach()
    else()
        execute_process(COMMAND ${CMAKE_COMMAND} -E
            copy_if_different ${_bundle_files} ${_gen_dir}
            WORKING_DIRECTORY ${_bundle_dir})
    endif()
endif()

add_custom_target(asn1_gen DEPENDS ${ASN1C_GEN_DIR}/CAM.h ${ASN1C_GEN_DIR}/DENM.h)

set(CXX_SOURCES asn1c_wrapper.cpp)
asn1c_sources(ASN1C_SOURCES ${ASN1C_GEN_DIR})
add_vanetza_component(asn1 ${CXX_SOURCES} ${ASN1C_SOURCES})
add_dependencies(asn1 asn1_gen)
target_link_libraries(asn1 Boost::boost)
target_include_directories(asn1 PUBLIC
    $<BUILD_INTERFACE:${ASN1C_GEN_DIR}>
    $<INSTALL_INTERFACE:include/vanetza/asn1/gen>)

# Silence warnings in code generated by asn1c
if (CMAKE_C_COMPILER_ID STREQUAL "Clang")
    set_property(TARGET asn1 APPEND PROPERTY COMPILE_OPTIONS "-Wno-parentheses-equality")
endif()

add_test_subdirectory(tests)

